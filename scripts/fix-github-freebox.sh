#!/bin/bash

# üîß Script de Correction GitHub pour Freebox - BAG Discord Bot
# Ce script configure correctement GitHub pour les sauvegardes sur Freebox

set -e

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Variables
BOT_USER="botuser"
BOT_DIR="/home/$BOT_USER/bag-discord-bot"
ENV_FILE="$BOT_DIR/.env"

# Fonction d'affichage
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
}

info() {
    echo -e "${PURPLE}‚ÑπÔ∏è  $1${NC}"
}

# Fonction pour demander une entr√©e utilisateur
prompt() {
    local prompt_text="$1"
    local var_name="$2"
    local current_value="$3"
    
    if [[ -n "$current_value" ]]; then
        echo -e "${YELLOW}$prompt_text${NC} [actuel: $current_value]"
        read -p "Nouvelle valeur (Entr√©e pour garder actuel): " new_value
        if [[ -z "$new_value" ]]; then
            new_value="$current_value"
        fi
    else
        echo -e "${YELLOW}$prompt_text${NC}"
        read -p "Valeur: " new_value
    fi
    
    eval "$var_name=\"$new_value\""
}

# V√©rifier les pr√©requis
check_prerequisites() {
    log "V√©rification des pr√©requis..."
    
    if [[ ! -d "$BOT_DIR" ]]; then
        error "R√©pertoire du bot non trouv√©: $BOT_DIR"
        exit 1
    fi
    
    if [[ ! -f "$ENV_FILE" ]]; then
        warning "Fichier .env non trouv√©, cr√©ation..."
        sudo -u "$BOT_USER" touch "$ENV_FILE"
    fi
    
    success "Pr√©requis v√©rifi√©s"
}

# Lire les variables d'environnement actuelles
read_current_env() {
    log "Lecture de la configuration actuelle..."
    
    if [[ -f "$ENV_FILE" ]]; then
        # Lire les valeurs actuelles
        CURRENT_GITHUB_TOKEN=$(grep "^GITHUB_TOKEN=" "$ENV_FILE" 2>/dev/null | cut -d'=' -f2- | tr -d '"' || echo "")
        CURRENT_GITHUB_REPO=$(grep "^GITHUB_REPO=" "$ENV_FILE" 2>/dev/null | cut -d'=' -f2- | tr -d '"' || echo "")
        CURRENT_GITHUB_BRANCH=$(grep "^GITHUB_BACKUP_BRANCH=" "$ENV_FILE" 2>/dev/null | cut -d'=' -f2- | tr -d '"' || echo "")
        
        if [[ -n "$CURRENT_GITHUB_TOKEN" ]]; then
            info "Token GitHub trouv√© (${CURRENT_GITHUB_TOKEN:0:8}...)"
        fi
        if [[ -n "$CURRENT_GITHUB_REPO" ]]; then
            info "D√©p√¥t GitHub: $CURRENT_GITHUB_REPO"
        fi
        if [[ -n "$CURRENT_GITHUB_BRANCH" ]]; then
            info "Branche de sauvegarde: $CURRENT_GITHUB_BRANCH"
        fi
    fi
}

# Configuration interactive
configure_github() {
    log "Configuration GitHub interactive..."
    echo
    
    # Token GitHub
    echo "üîë Configuration du Token GitHub"
    echo "   - Allez sur https://github.com/settings/tokens"
    echo "   - Cr√©ez un token avec les permissions: repo, contents:write"
    echo
    prompt "Token GitHub" "GITHUB_TOKEN" "$CURRENT_GITHUB_TOKEN"
    
    echo
    
    # D√©p√¥t GitHub
    echo "üìÅ Configuration du D√©p√¥t GitHub"
    echo "   - Format: proprietaire/nom-du-depot"
    echo "   - Exemple: mel805/Bag-bot"
    echo
    prompt "D√©p√¥t GitHub (owner/repo)" "GITHUB_REPO" "$CURRENT_GITHUB_REPO"
    
    echo
    
    # Branche de sauvegarde
    echo "üåø Configuration de la Branche de Sauvegarde"
    echo "   - Nom de la branche pour stocker les sauvegardes"
    echo "   - Sera cr√©√©e automatiquement si elle n'existe pas"
    echo
    if [[ -z "$CURRENT_GITHUB_BRANCH" ]]; then
        CURRENT_GITHUB_BRANCH="backup-data"
    fi
    
    # V√©rifier si la branche actuelle est incorrecte
    if [[ "$CURRENT_GITHUB_BRANCH" == "backu" ]]; then
        warning "‚ö†Ô∏è  Branche incorrecte d√©tect√©e: 'backu'"
        info "Correction automatique vers 'backup-data'"
        CURRENT_GITHUB_BRANCH="backup-data"
    fi
    prompt "Branche de sauvegarde" "GITHUB_BACKUP_BRANCH" "$CURRENT_GITHUB_BRANCH"
}

# Mise √† jour du fichier .env
update_env_file() {
    log "Mise √† jour du fichier .env..."
    
    # Cr√©er une sauvegarde
    if [[ -f "$ENV_FILE" ]]; then
        sudo -u "$BOT_USER" cp "$ENV_FILE" "$ENV_FILE.backup.$(date +%Y%m%d_%H%M%S)"
        success "Sauvegarde du .env cr√©√©e"
    fi
    
    # Supprimer les anciennes entr√©es GitHub
    sudo -u "$BOT_USER" sed -i '/^GITHUB_TOKEN=/d' "$ENV_FILE" 2>/dev/null || true
    sudo -u "$BOT_USER" sed -i '/^GITHUB_REPO=/d' "$ENV_FILE" 2>/dev/null || true
    sudo -u "$BOT_USER" sed -i '/^GITHUB_BACKUP_BRANCH=/d' "$ENV_FILE" 2>/dev/null || true
    
    # Ajouter les nouvelles entr√©es
    {
        echo ""
        echo "# Configuration GitHub pour sauvegardes"
        echo "GITHUB_TOKEN=\"$GITHUB_TOKEN\""
        echo "GITHUB_REPO=\"$GITHUB_REPO\""
        echo "GITHUB_BACKUP_BRANCH=\"$GITHUB_BACKUP_BRANCH\""
    } | sudo -u "$BOT_USER" tee -a "$ENV_FILE" > /dev/null
    
    success "Fichier .env mis √† jour"
}

# Test de la connectivit√© GitHub
test_github_connection() {
    log "Test de la connectivit√© GitHub..."
    
    # Test avec Node.js
    cat > "/tmp/test-github.js" << 'EOF'
const GitHubBackup = require('./src/storage/githubBackup.js');
require('dotenv').config();

async function testGitHub() {
    const github = new GitHubBackup();
    
    console.log('üîç Test de configuration...');
    if (!github.isConfigured()) {
        console.error('‚ùå Configuration GitHub manquante');
        process.exit(1);
    }
    console.log('‚úÖ Configuration OK');
    
    console.log('üîó Test de connectivit√©...');
    const result = await github.testConnection();
    
    if (result.success) {
        console.log('‚úÖ Connectivit√© GitHub OK');
        console.log(`üìÅ D√©p√¥t: ${result.repo}`);
        console.log(`üîê Permissions push: ${result.permissions.push ? '‚úÖ' : '‚ùå'}`);
        console.log(`üëë Permissions admin: ${result.permissions.admin ? '‚úÖ' : '‚ùå'}`);
    } else {
        console.error('‚ùå Erreur connectivit√©:', result.error);
        process.exit(1);
    }
}

testGitHub().catch(error => {
    console.error('‚ùå Erreur:', error.message);
    process.exit(1);
});
EOF

    cd "$BOT_DIR"
    if sudo -u "$BOT_USER" node /tmp/test-github.js; then
        success "Test GitHub r√©ussi !"
    else
        error "Test GitHub √©chou√©"
        return 1
    fi
    
    rm -f "/tmp/test-github.js"
}

# Test de sauvegarde
test_backup() {
    log "Test de sauvegarde GitHub..."
    
    cat > "/tmp/test-backup.js" << 'EOF'
const GitHubBackup = require('./src/storage/githubBackup.js');
require('dotenv').config();

async function testBackup() {
    const github = new GitHubBackup();
    
    // Donn√©es de test
    const testData = {
        test: true,
        timestamp: new Date().toISOString(),
        message: 'Test de sauvegarde depuis Freebox'
    };
    
    console.log('üíæ Test de sauvegarde...');
    const result = await github.backup({ test_data: testData });
    
    if (result.success) {
        console.log('‚úÖ Sauvegarde test r√©ussie !');
        console.log(`üìù Commit: ${result.commit_sha.substring(0, 8)}`);
        console.log(`üîó URL: ${result.commit_url}`);
    } else {
        console.error('‚ùå Sauvegarde test √©chou√©e');
        process.exit(1);
    }
}

testBackup().catch(error => {
    console.error('‚ùå Erreur:', error.message);
    process.exit(1);
});
EOF

    cd "$BOT_DIR"
    if sudo -u "$BOT_USER" node /tmp/test-backup.js; then
        success "Test de sauvegarde r√©ussi !"
    else
        error "Test de sauvegarde √©chou√©"
        return 1
    fi
    
    rm -f "/tmp/test-backup.js"
}

# Red√©marrage du bot
restart_bot() {
    log "Red√©marrage du bot pour appliquer les changements..."
    
    # D√©tecter le gestionnaire de processus
    if systemctl is-active --quiet bag-discord-bot 2>/dev/null; then
        log "Red√©marrage avec systemd..."
        systemctl restart bag-discord-bot
        success "Bot red√©marr√© avec systemd"
    elif sudo -u "$BOT_USER" pm2 list | grep -q bagbot 2>/dev/null; then
        log "Red√©marrage avec PM2..."
        sudo -u "$BOT_USER" pm2 restart bagbot
        success "Bot red√©marr√© avec PM2"
    else
        warning "Aucun gestionnaire de processus d√©tect√©"
        info "Red√©marrez manuellement le bot apr√®s ce script"
    fi
}

# Fonction principale
main() {
    echo "üîß Correction de la Configuration GitHub - BAG Discord Bot"
    echo "======================================================="
    echo
    
    info "Ce script va configurer GitHub pour les sauvegardes sur Freebox"
    echo
    
    # V√©rifications
    check_prerequisites
    read_current_env
    
    echo
    read -p "Voulez-vous continuer la configuration ? [Y/n] " -n 1 -r
    echo
    
    if [[ $REPLY =~ ^[Nn]$ ]]; then
        info "Configuration annul√©e"
        exit 0
    fi
    
    # Configuration
    configure_github
    update_env_file
    
    echo
    log "Configuration termin√©e, test de connectivit√©..."
    
    # Tests
    if test_github_connection; then
        echo
        read -p "Voulez-vous tester une sauvegarde ? [Y/n] " -n 1 -r
        echo
        
        if [[ ! $REPLY =~ ^[Nn]$ ]]; then
            test_backup
        fi
        
        echo
        read -p "Voulez-vous red√©marrer le bot maintenant ? [Y/n] " -n 1 -r
        echo
        
        if [[ ! $REPLY =~ ^[Nn]$ ]]; then
            restart_bot
        fi
        
        echo
        success "üéâ Configuration GitHub termin√©e avec succ√®s !"
        echo
        info "R√©sum√© de la configuration:"
        echo "   ‚Ä¢ Token: ${GITHUB_TOKEN:0:8}..."
        echo "   ‚Ä¢ D√©p√¥t: $GITHUB_REPO"
        echo "   ‚Ä¢ Branche: $GITHUB_BACKUP_BRANCH"
        echo
        info "Les sauvegardes automatiques GitHub sont maintenant actives !"
        
    else
        error "√âchec de la configuration GitHub"
        echo
        warning "V√©rifiez :"
        echo "   ‚Ä¢ Que le token GitHub a les bonnes permissions"
        echo "   ‚Ä¢ Que le d√©p√¥t existe et est accessible"
        echo "   ‚Ä¢ Votre connexion Internet"
        exit 1
    fi
}

# V√©rification des privil√®ges
if [[ $EUID -ne 0 ]]; then
    error "Ce script n√©cessite les privil√®ges root (sudo)"
    exit 1
fi

# Ex√©cution
main "$@"