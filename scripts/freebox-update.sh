#!/bin/bash

# üîÑ Script de Mise √† Jour - BAG Discord Bot sur Freebox Delta
# Ce script met √† jour le bot Discord en toute s√©curit√©

set -e  # Arr√™ter en cas d'erreur

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Variables de configuration
BOT_USER="botuser"
BOT_DIR="/home/$BOT_USER/bag-discord-bot"
SERVICE_NAME="bag-discord-bot"
BACKUP_DIR="$BOT_DIR/backups"

# Fonction d'affichage
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# V√©rification des privil√®ges
check_permissions() {
    if [[ $EUID -ne 0 ]]; then
        error "Ce script doit √™tre ex√©cut√© en tant que root (sudo)"
        exit 1
    fi
}

# V√©rification de l'installation existante
check_installation() {
    log "V√©rification de l'installation existante..."
    
    if [[ ! -d "$BOT_DIR" ]]; then
        error "Le r√©pertoire du bot n'existe pas : $BOT_DIR"
        exit 1
    fi
    
    if ! systemctl list-unit-files | grep -q "$SERVICE_NAME"; then
        error "Le service $SERVICE_NAME n'est pas configur√©"
        exit 1
    fi
    
    success "Installation existante v√©rifi√©e"
}

# Cr√©ation d'une sauvegarde
create_backup() {
    log "Cr√©ation d'une sauvegarde..."
    
    TIMESTAMP=$(date +%Y%m%d_%H%M%S)
    BACKUP_NAME="backup_$TIMESTAMP"
    BACKUP_PATH="$BACKUP_DIR/$BACKUP_NAME"
    
    # Cr√©er le r√©pertoire de sauvegarde
    sudo -u "$BOT_USER" mkdir -p "$BACKUP_PATH"
    
    # Sauvegarder les fichiers importants
    sudo -u "$BOT_USER" cp -r "$BOT_DIR/data" "$BACKUP_PATH/" 2>/dev/null || true
    sudo -u "$BOT_USER" cp "$BOT_DIR/.env" "$BACKUP_PATH/" 2>/dev/null || true
    sudo -u "$BOT_USER" cp "$BOT_DIR/package.json" "$BACKUP_PATH/" 2>/dev/null || true
    sudo -u "$BOT_USER" cp "$BOT_DIR/package-lock.json" "$BACKUP_PATH/" 2>/dev/null || true
    
    success "Sauvegarde cr√©√©e : $BACKUP_PATH"
}

# Arr√™t du service
stop_service() {
    log "Arr√™t du service..."
    
    if systemctl is-active --quiet "$SERVICE_NAME"; then
        systemctl stop "$SERVICE_NAME"
        success "Service arr√™t√©"
    else
        warning "Le service n'√©tait pas en cours d'ex√©cution"
    fi
}

# Mise √† jour du code
update_code() {
    log "Mise √† jour du code..."
    
    cd "$BOT_DIR"
    
    # Sauvegarder les modifications locales
    sudo -u "$BOT_USER" git stash push -m "Auto-stash before update $(date)"
    
    # R√©cup√©rer les derni√®res modifications
    sudo -u "$BOT_USER" git fetch origin
    sudo -u "$BOT_USER" git pull origin main
    
    success "Code mis √† jour"
}

# Mise √† jour des d√©pendances
update_dependencies() {
    log "Mise √† jour des d√©pendances..."
    
    cd "$BOT_DIR"
    
    # Nettoyer le cache npm
    sudo -u "$BOT_USER" npm cache clean --force
    
    # Mettre √† jour les d√©pendances
    sudo -u "$BOT_USER" npm install --production
    
    # Audit de s√©curit√©
    sudo -u "$BOT_USER" npm audit fix --production || true
    
    success "D√©pendances mises √† jour"
}

# D√©ploiement des commandes Discord
deploy_commands() {
    log "D√©ploiement des commandes Discord..."
    
    cd "$BOT_DIR"
    
    if sudo -u "$BOT_USER" npm run register; then
        success "Commandes Discord d√©ploy√©es"
    else
        warning "√âchec du d√©ploiement des commandes (le bot d√©marrera quand m√™me)"
    fi
}

# D√©marrage du service
start_service() {
    log "D√©marrage du service..."
    
    systemctl start "$SERVICE_NAME"
    
    # Attendre un peu pour v√©rifier que le service d√©marre correctement
    sleep 5
    
    if systemctl is-active --quiet "$SERVICE_NAME"; then
        success "Service d√©marr√© avec succ√®s"
    else
        error "√âchec du d√©marrage du service"
        systemctl status "$SERVICE_NAME" --no-pager
        exit 1
    fi
}

# V√©rification post-mise √† jour
post_update_check() {
    log "V√©rification post-mise √† jour..."
    
    # V√©rifier que le service fonctionne
    sleep 10
    
    if systemctl is-active --quiet "$SERVICE_NAME"; then
        success "Le bot fonctionne correctement"
        
        # Afficher les derniers logs
        echo
        log "Derniers logs du bot :"
        journalctl -u "$SERVICE_NAME" -n 10 --no-pager
    else
        error "Le bot ne fonctionne pas correctement"
        echo
        error "Logs d'erreur :"
        journalctl -u "$SERVICE_NAME" -n 20 --no-pager
        exit 1
    fi
}

# Nettoyage des anciennes sauvegardes
cleanup_backups() {
    log "Nettoyage des anciennes sauvegardes..."
    
    # Garder seulement les 5 derni√®res sauvegardes
    cd "$BACKUP_DIR"
    sudo -u "$BOT_USER" ls -t | tail -n +6 | xargs -r sudo -u "$BOT_USER" rm -rf
    
    success "Anciennes sauvegardes nettoy√©es"
}

# Affichage des informations finales
show_final_info() {
    echo
    echo "========================================"
    success "Mise √† jour termin√©e avec succ√®s!"
    echo "========================================"
    echo
    echo "üìä Statut du service :"
    systemctl status "$SERVICE_NAME" --no-pager -l
    echo
    echo "üìã Commandes utiles :"
    echo "   ‚Ä¢ Logs temps r√©el : sudo journalctl -u $SERVICE_NAME -f"
    echo "   ‚Ä¢ Red√©marrer      : sudo systemctl restart $SERVICE_NAME"
    echo "   ‚Ä¢ Arr√™ter         : sudo systemctl stop $SERVICE_NAME"
    echo "   ‚Ä¢ Statut          : sudo systemctl status $SERVICE_NAME"
    echo
}

# Fonction de rollback en cas d'√©chec
rollback() {
    error "√âchec de la mise √† jour, tentative de rollback..."
    
    # Arr√™ter le service d√©faillant
    systemctl stop "$SERVICE_NAME" || true
    
    # Restaurer la derni√®re sauvegarde
    LATEST_BACKUP=$(sudo -u "$BOT_USER" ls -t "$BACKUP_DIR" | head -n1)
    if [[ -n "$LATEST_BACKUP" ]]; then
        log "Restauration de la sauvegarde : $LATEST_BACKUP"
        
        # Restaurer les fichiers
        sudo -u "$BOT_USER" cp -r "$BACKUP_DIR/$LATEST_BACKUP/"* "$BOT_DIR/" 2>/dev/null || true
        
        # Red√©marrer le service
        systemctl start "$SERVICE_NAME" || true
        
        warning "Rollback effectu√©, v√©rifiez le statut du service"
    else
        error "Aucune sauvegarde disponible pour le rollback"
    fi
}

# Fonction principale
main() {
    echo "üîÑ Mise √† jour du BAG Discord Bot sur Freebox Delta"
    echo "================================================="
    echo
    
    # Pi√®ge pour g√©rer les erreurs
    trap rollback ERR
    
    check_permissions
    check_installation
    
    log "D√©but de la mise √† jour..."
    
    create_backup
    stop_service
    update_code
    update_dependencies
    deploy_commands
    start_service
    post_update_check
    cleanup_backups
    
    # D√©sactiver le pi√®ge d'erreur apr√®s succ√®s
    trap - ERR
    
    show_final_info
}

# Gestion des signaux
trap 'error "Mise √† jour interrompue"; rollback; exit 1' INT TERM

# Options de ligne de commande
case "${1:-}" in
    --help|-h)
        echo "Usage: $0 [options]"
        echo
        echo "Options:"
        echo "  --help, -h     Afficher cette aide"
        echo "  --no-backup    Ne pas cr√©er de sauvegarde"
        echo "  --force        Forcer la mise √† jour m√™me si le service est arr√™t√©"
        echo
        exit 0
        ;;
    --no-backup)
        create_backup() { log "Sauvegarde ignor√©e (--no-backup)"; }
        ;;
    --force)
        check_installation() { log "V√©rification ignor√©e (--force)"; }
        ;;
esac

# Ex√©cution du script principal
main "$@"