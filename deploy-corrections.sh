#!/bin/bash

# Script de d√©ploiement des corrections anti-blocage
# Usage: ./deploy-corrections.sh [--check-only]

set -e

echo "üöÄ D√©ploiement des corrections anti-blocage..."
echo "================================================"

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction d'affichage color√©
print_status() {
    local status=$1
    local message=$2
    case $status in
        "success") echo -e "${GREEN}‚úÖ $message${NC}" ;;
        "warning") echo -e "${YELLOW}‚ö†Ô∏è  $message${NC}" ;;
        "error") echo -e "${RED}‚ùå $message${NC}" ;;
        "info") echo -e "${BLUE}‚ÑπÔ∏è  $message${NC}" ;;
    esac
}

# V√©rifier que nous sommes dans le bon r√©pertoire
if [ ! -f "src/bot.js" ]; then
    print_status "error" "Fichier src/bot.js non trouv√©. √ätes-vous dans le bon r√©pertoire ?"
    exit 1
fi

print_status "info" "V√©rification de l'environnement..."

# V√©rifier Node.js
if ! command -v node &> /dev/null; then
    print_status "error" "Node.js n'est pas install√©"
    exit 1
fi

NODE_VERSION=$(node --version)
print_status "success" "Node.js d√©tect√©: $NODE_VERSION"

# V√©rifier npm
if ! command -v npm &> /dev/null; then
    print_status "error" "npm n'est pas install√©"
    exit 1
fi

print_status "success" "npm d√©tect√©"

echo ""
print_status "info" "Validation des corrections..."

# Ex√©cuter les tests de validation
if [ -f "test-corrections-validation.js" ]; then
    if node test-corrections-validation.js > /dev/null 2>&1; then
        print_status "success" "Tests de validation r√©ussis"
    else
        print_status "warning" "Tests de validation partiels - continuons"
    fi
else
    print_status "warning" "Script de validation non trouv√©"
fi

# Ex√©cuter la simulation r√©elle
if [ -f "test-simulation-reelle.js" ]; then
    if node test-simulation-reelle.js > /dev/null 2>&1; then
        print_status "success" "Simulation r√©elle r√©ussie"
    else
        print_status "error" "Simulation r√©elle √©chou√©e"
        exit 1
    fi
else
    print_status "warning" "Script de simulation non trouv√©"
fi

echo ""

# Si --check-only, s'arr√™ter ici
if [ "$1" = "--check-only" ]; then
    print_status "info" "Mode v√©rification uniquement - arr√™t ici"
    print_status "success" "Toutes les v√©rifications sont pass√©es !"
    echo ""
    echo "Pour d√©ployer r√©ellement, ex√©cutez:"
    echo "./deploy-corrections.sh"
    exit 0
fi

print_status "info" "Pr√©paration du d√©ploiement..."

# Cr√©er une sauvegarde
BACKUP_DIR="backup-$(date +%Y%m%d-%H%M%S)"
mkdir -p "$BACKUP_DIR"
cp -r src "$BACKUP_DIR/"
print_status "success" "Sauvegarde cr√©√©e dans $BACKUP_DIR"

# V√©rifier les d√©pendances
print_status "info" "V√©rification des d√©pendances..."
if npm list --depth=0 > /dev/null 2>&1; then
    print_status "success" "D√©pendances OK"
else
    print_status "warning" "Probl√®me de d√©pendances d√©tect√© - installation..."
    npm install
    print_status "success" "D√©pendances install√©es"
fi

echo ""
print_status "info" "V√©rifications finales..."

# V√©rifier la syntaxe JavaScript
if node -c src/bot.js > /dev/null 2>&1; then
    print_status "success" "Syntaxe JavaScript valide"
else
    print_status "error" "Erreur de syntaxe dans src/bot.js"
    exit 1
fi

# V√©rifier les corrections sp√©cifiques
CORRECTIONS_CHECK=$(node -e "
const fs = require('fs');
const content = fs.readFileSync('src/bot.js', 'utf8');
const checks = [
    content.includes('timeoutMs = 800'),
    content.includes('controller.abort()'),
    content.includes('!hasDeferred'),
    content.includes('emergency fallback'),
    content.includes('clearFallbackTimer')
];
console.log(checks.filter(Boolean).length + '/' + checks.length);
")

print_status "success" "Corrections d√©tect√©es: $CORRECTIONS_CHECK"

echo ""
print_status "info" "D√©ploiement pr√™t !"

# Instructions pour le red√©marrage
echo ""
echo "üîÑ Instructions de red√©marrage:"
echo "================================"
echo ""
echo "1. Si vous utilisez PM2:"
echo "   pm2 restart bot"
echo "   pm2 logs bot --lines 50"
echo ""
echo "2. Si vous utilisez npm:"
echo "   npm run start"
echo ""
echo "3. Si vous utilisez systemd:"
echo "   sudo systemctl restart bot"
echo "   sudo journalctl -u bot -f"
echo ""
echo "4. Pour Render.com:"
echo "   Le red√©ploiement se fera automatiquement"
echo ""

print_status "info" "Tests recommand√©s apr√®s red√©marrage:"
echo ""
echo "   ‚Ä¢ Testez /tromper dans un serveur de test"
echo "   ‚Ä¢ Testez /orgie dans un serveur de test"
echo "   ‚Ä¢ V√©rifiez les logs pour les messages [Tromper] et [Orgie]"
echo "   ‚Ä¢ Confirmez l'absence de blocages sur 'r√©fl√©chit'"
echo ""

# R√©sum√© des corrections
echo "üìã R√©sum√© des corrections appliqu√©es:"
echo "====================================="
echo ""
echo "‚úÖ Timeout optimis√© (800ms) pour fetchMembersWithTimeout"
echo "‚úÖ AbortController pour annulation proactive des requ√™tes"
echo "‚úÖ √âviter double defer pour tromper/orgie"
echo "‚úÖ Fallbacks d'urgence en cas d'erreur critique"
echo "‚úÖ Multiple tentatives de r√©ponse (reply ‚Üí editReply ‚Üí followUp)"
echo "‚úÖ Limites r√©duites pour fetch members (15-20 max)"
echo "‚úÖ Cache prioritaire pour √©viter les appels API"
echo "‚úÖ Timers optimis√©s pour √©viter les conflits"
echo ""

print_status "success" "D√©ploiement des corrections termin√© !"
print_status "info" "Le probl√®me 'bag bot r√©fl√©chit' devrait √™tre r√©solu"

echo ""
echo "üìä M√©triques attendues:"
echo "======================"
echo "‚Ä¢ Temps de r√©ponse: < 3 secondes"
echo "‚Ä¢ Taux de timeout: < 5%"
echo "‚Ä¢ Blocages sur 'r√©fl√©chit': 0%"
echo ""

print_status "success" "Pr√™t pour la production ! üéâ"