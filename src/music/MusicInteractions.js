const { EmbedBuilder } = require('discord.js');

/**
 * Gestionnaire des interactions du player de musique (boutons)
 */

class MusicInteractions {
  constructor(musicManager) {
    this.music = musicManager;
  }

  /**
   * G√®re toutes les interactions li√©es √† la musique
   */
  async handleMusicInteraction(interaction) {
    if (!interaction.isButton() || !interaction.customId.startsWith('music_')) {
      return false;
    }

    const player = this.music.getPlayer(interaction.guildId);
    
    if (!player) {
      return interaction.reply({
        content: '‚ùå Aucune musique en cours de lecture !',
        ephemeral: true
      });
    }

    // V√©rifier si l'utilisateur est dans le salon vocal
    const memberChannel = interaction.member.voice?.channel;
    const botChannel = interaction.guild.channels.cache.get(player.voiceId);
    
    if (!memberChannel || !botChannel || memberChannel.id !== botChannel.id) {
      return interaction.reply({
        content: '‚ùå Vous devez √™tre dans le m√™me salon vocal que le bot !',
        ephemeral: true
      });
    }

    const customId = interaction.customId;

    try {
      await interaction.deferUpdate();

      switch (customId) {
        case 'music_pause_resume':
          await this.handlePauseResume(interaction, player);
          break;
        case 'music_skip':
          await this.handleSkip(interaction, player);
          break;
        case 'music_previous':
          await this.handlePrevious(interaction, player);
          break;
        case 'music_stop':
          await this.handleStop(interaction, player);
          break;
        case 'music_queue':
          await this.handleQueueDisplay(interaction, player);
          break;
        case 'music_vol_down':
          await this.handleVolumeDown(interaction, player);
          break;
        case 'music_vol_up':
          await this.handleVolumeUp(interaction, player);
          break;
        case 'music_shuffle':
          await this.handleShuffle(interaction, player);
          break;
        case 'music_repeat':
          await this.handleRepeat(interaction, player);
          break;
        case 'music_disconnect':
          await this.handleDisconnect(interaction, player);
          break;
        default:
          return false;
      }

      return true;
    } catch (error) {
      console.error(`[Music] Erreur interaction ${customId}:`, error);
      try {
        await interaction.followUp({
          content: `‚ùå Erreur lors de l'ex√©cution de l'action !`,
          ephemeral: true
        });
      } catch (e) {
        console.error('[Music] Erreur envoi message d\'erreur:', e);
      }
      return true;
    }
  }

  /**
   * G√®re le bouton pause/resume
   */
  async handlePauseResume(interaction, player) {
    const wasPaused = player.paused;
    player.pause(!wasPaused);
    
    const embed = new EmbedBuilder()
      .setColor(wasPaused ? 0x00ff00 : 0xff9900)
      .setTitle(wasPaused ? '‚ñ∂Ô∏è Lecture reprise' : '‚è∏Ô∏è Lecture en pause')
      .setDescription(player.queue.current ? `**${player.queue.current.title}**` : 'Musique actuelle')
      .setFooter({ text: `Par ${interaction.user.tag}`, iconURL: interaction.user.displayAvatarURL() })
      .setTimestamp();

    await interaction.followUp({ embeds: [embed], ephemeral: true });
  }

  /**
   * G√®re le bouton skip
   */
  async handleSkip(interaction, player) {
    const currentTrack = player.queue.current;
    
    if (player.queue.size === 0 && !currentTrack) {
      return interaction.followUp({
        content: '‚ùå Aucune musique suivante dans la queue !',
        ephemeral: true
      });
    }

    player.skip();
    
    const embed = new EmbedBuilder()
      .setColor(0xff9900)
      .setTitle('‚è≠Ô∏è Musique pass√©e')
      .setDescription(currentTrack ? `**${currentTrack.title}** a √©t√© pass√©e` : 'Musique pass√©e')
      .setFooter({ text: `Par ${interaction.user.tag}`, iconURL: interaction.user.displayAvatarURL() })
      .setTimestamp();

    await interaction.followUp({ embeds: [embed], ephemeral: true });
  }

  /**
   * G√®re le bouton previous (si support√©)
   */
  async handlePrevious(interaction, player) {
    // Kazagumo ne supporte pas nativement le previous, on peut impl√©menter une logique custom
    await interaction.followUp({
      content: '‚ùå La fonction "pr√©c√©dent" n\'est pas encore disponible !',
      ephemeral: true
    });
  }

  /**
   * G√®re le bouton stop
   */
  async handleStop(interaction, player) {
    player.queue.clear();
    player.stop();
    
    const embed = new EmbedBuilder()
      .setColor(0xff0000)
      .setTitle('‚èπÔ∏è Musique arr√™t√©e')
      .setDescription('La lecture a √©t√© arr√™t√©e et la queue vid√©e.')
      .setFooter({ text: `Par ${interaction.user.tag}`, iconURL: interaction.user.displayAvatarURL() })
      .setTimestamp();

    await interaction.followUp({ embeds: [embed], ephemeral: true });
  }

  /**
   * G√®re l'affichage de la queue
   */
  async handleQueueDisplay(interaction, player) {
    const current = player.queue.current;
    const queue = player.queue;
    
    const embed = new EmbedBuilder()
      .setColor(0x1db954)
      .setTitle('üìã File d\'attente')
      .setTimestamp();

    if (current) {
      embed.addFields({
        name: 'üéµ En cours de lecture',
        value: `[**${current.title}**](${current.uri})\nüë§ ${current.author || 'Inconnu'} ‚Ä¢ ‚è±Ô∏è ${this.music.formatDuration(current.length)}`,
        inline: false
      });
    }

    if (queue.size > 0) {
      const tracks = queue.slice(0, 5).map((track, index) => 
        `\`${index + 1}.\` [**${track.title}**](${track.uri})\nüë§ ${track.author || 'Inconnu'} ‚Ä¢ ‚è±Ô∏è ${this.music.formatDuration(track.length)}`
      ).join('\n\n');

      embed.addFields({
        name: `üé∂ √Ä venir (${queue.size} musique${queue.size > 1 ? 's' : ''})`,
        value: tracks + (queue.size > 5 ? `\n\n*... et ${queue.size - 5} autre${queue.size - 5 > 1 ? 's' : ''}*` : ''),
        inline: false
      });
    } else {
      embed.addFields({
        name: 'üì≠ File d\'attente vide',
        value: 'Ajoutez des musiques avec `/play` !',
        inline: false
      });
    }

    embed.setFooter({ 
      text: `Volume: ${player.volume}% ‚Ä¢ R√©p√©tition: ${this.getLoopText(player.loop)}` 
    });

    await interaction.followUp({ embeds: [embed], ephemeral: true });
  }

  /**
   * G√®re la diminution du volume
   */
  async handleVolumeDown(interaction, player) {
    const newVolume = Math.max(0, player.volume - 10);
    player.setVolume(newVolume);
    
    const embed = new EmbedBuilder()
      .setColor(0x00ff00)
      .setTitle('üîâ Volume diminu√©')
      .setDescription(`Volume: **${newVolume}%**`)
      .setFooter({ text: `Par ${interaction.user.tag}`, iconURL: interaction.user.displayAvatarURL() })
      .setTimestamp();

    await interaction.followUp({ embeds: [embed], ephemeral: true });
  }

  /**
   * G√®re l'augmentation du volume
   */
  async handleVolumeUp(interaction, player) {
    const newVolume = Math.min(200, player.volume + 10);
    player.setVolume(newVolume);
    
    const embed = new EmbedBuilder()
      .setColor(0x00ff00)
      .setTitle('üîä Volume augment√©')
      .setDescription(`Volume: **${newVolume}%**`)
      .setFooter({ text: `Par ${interaction.user.tag}`, iconURL: interaction.user.displayAvatarURL() })
      .setTimestamp();

    await interaction.followUp({ embeds: [embed], ephemeral: true });
  }

  /**
   * G√®re le m√©lange de la queue
   */
  async handleShuffle(interaction, player) {
    if (player.queue.size < 2) {
      return interaction.followUp({
        content: '‚ùå Il faut au moins 2 musiques dans la queue pour m√©langer !',
        ephemeral: true
      });
    }

    player.queue.shuffle();
    
    const embed = new EmbedBuilder()
      .setColor(0x00ff00)
      .setTitle('üîÄ Queue m√©lang√©e')
      .setDescription(`**${player.queue.size}** musiques ont √©t√© m√©lang√©es !`)
      .setFooter({ text: `Par ${interaction.user.tag}`, iconURL: interaction.user.displayAvatarURL() })
      .setTimestamp();

    await interaction.followUp({ embeds: [embed], ephemeral: true });
  }

  /**
   * G√®re la r√©p√©tition
   */
  async handleRepeat(interaction, player) {
    // Cycle through repeat modes: none -> track -> queue -> none
    let newLoop;
    switch (player.loop) {
      case 'none':
        newLoop = 'track';
        break;
      case 'track':
        newLoop = 'queue';
        break;
      case 'queue':
      default:
        newLoop = 'none';
        break;
    }

    player.setLoop(newLoop);

    const modeText = {
      'track': 'üîÇ R√©p√©tition de la piste activ√©e',
      'queue': 'üîÅ R√©p√©tition de la queue activ√©e', 
      'none': '‚ùå R√©p√©tition d√©sactiv√©e'
    };
    
    const embed = new EmbedBuilder()
      .setColor(newLoop === 'none' ? 0xff9900 : 0x00ff00)
      .setTitle('üîÅ R√©p√©tition')
      .setDescription(modeText[newLoop])
      .setFooter({ text: `Par ${interaction.user.tag}`, iconURL: interaction.user.displayAvatarURL() })
      .setTimestamp();

    await interaction.followUp({ embeds: [embed], ephemeral: true });
  }

  /**
   * G√®re la d√©connexion
   */
  async handleDisconnect(interaction, player) {
    const voiceChannel = interaction.guild.channels.cache.get(player.voiceId);
    player.destroy();
    
    const embed = new EmbedBuilder()
      .setColor(0xff0000)
      .setTitle('üö™ D√©connexion')
      .setDescription(`D√©connect√© de **${voiceChannel?.name || 'salon vocal'}**`)
      .setFooter({ text: `Par ${interaction.user.tag}`, iconURL: interaction.user.displayAvatarURL() })
      .setTimestamp();

    await interaction.followUp({ embeds: [embed], ephemeral: true });
  }

  /**
   * Convertit le mode de r√©p√©tition en texte
   */
  getLoopText(loop) {
    switch (loop) {
      case 'track':
        return 'Piste';
      case 'queue':
        return 'Queue';
      case 'none':
      default:
        return 'D√©sactiv√©e';
    }
  }
}

module.exports = MusicInteractions;