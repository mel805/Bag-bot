const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

/**
 * Syst√®me de synchronisation avec la Freebox - Version 7 jours
 * Synchronise les sauvegardes vers un r√©pertoire persistant sur la Freebox
 * R√©tention: 7 jours (168 sauvegardes horaires)
 */

class FreeboxSync {
  constructor(localBackupDir = './data/backups', freeboxPath = '/var/data/bot-backups') {
    this.localBackupDir = localBackupDir;
    this.freeboxPath = freeboxPath;
    this.retentionHours = 168; // 7 jours * 24 heures
  }

  /**
   * Cr√©e le r√©pertoire de destination sur la Freebox si n√©cessaire
   */
  ensureFreeboxDirectory() {
    try {
      // Cr√©er le r√©pertoire de destination s'il n'existe pas
      execSync(`mkdir -p ${this.freeboxPath}`, { stdio: 'pipe' });
      
      // Cr√©er les sous-dossiers pour organiser
      execSync(`mkdir -p ${this.freeboxPath}/config`, { stdio: 'pipe' });
      execSync(`mkdir -p ${this.freeboxPath}/userdata`, { stdio: 'pipe' });
      
      console.log(`‚úÖ R√©pertoires Freebox cr√©√©s: ${this.freeboxPath}`);
      return true;
    } catch (error) {
      console.error('‚ùå Erreur cr√©ation r√©pertoires Freebox:', error.message);
      return false;
    }
  }

  /**
   * Synchronise les sauvegardes vers la Freebox
   */
  syncToFreebox() {
    try {
      if (!this.ensureFreeboxDirectory()) {
        return false;
      }

      // Synchroniser les fichiers de configuration
      const configPattern = path.join(this.localBackupDir, 'bot-config_*.json');
      const userDataPattern = path.join(this.localBackupDir, 'user-data_*.json');

      // Copier les fichiers de configuration
      try {
        execSync(`cp ${configPattern} ${this.freeboxPath}/config/ 2>/dev/null || true`, { stdio: 'pipe' });
        console.log('üìã Configurations synchronis√©es vers Freebox');
      } catch (error) {
        console.log('‚ö†Ô∏è Aucun fichier de config √† synchroniser');
      }

      // Copier les fichiers de donn√©es utilisateurs
      try {
        execSync(`cp ${userDataPattern} ${this.freeboxPath}/userdata/ 2>/dev/null || true`, { stdio: 'pipe' });
        console.log('üë• Donn√©es utilisateurs synchronis√©es vers Freebox');
      } catch (error) {
        console.log('‚ö†Ô∏è Aucun fichier de donn√©es utilisateur √† synchroniser');
      }

      // Cr√©er un fichier de m√©tadonn√©es avec l'horodatage
      const metadataPath = path.join(this.freeboxPath, 'last_sync.txt');
      const timestamp = new Date().toISOString();
      const configCount = this.countFiles(`${this.freeboxPath}/config/bot-config_*.json`);
      const userDataCount = this.countFiles(`${this.freeboxPath}/userdata/user-data_*.json`);
      
      fs.writeFileSync(metadataPath, 
        `Derni√®re synchronisation: ${timestamp}\n` +
        `Source: ${process.cwd()}\n` +
        `R√©tention: ${this.retentionHours} heures (7 jours)\n` +
        `Sauvegardes config: ${configCount}\n` +
        `Sauvegardes donn√©es: ${userDataCount}\n`
      );

      console.log(`‚úÖ Synchronisation Freebox termin√©e: ${timestamp}`);
      console.log(`üìä Sauvegardes synchronis√©es: ${Math.min(configCount, userDataCount)} compl√®tes`);
      return true;

    } catch (error) {
      console.error('‚ùå Erreur synchronisation Freebox:', error.message);
      return false;
    }
  }

  /**
   * Compte les fichiers correspondant √† un pattern
   */
  countFiles(pattern) {
    try {
      const result = execSync(`ls ${pattern} 2>/dev/null | wc -l`, { encoding: 'utf8' });
      return parseInt(result.trim()) || 0;
    } catch (error) {
      return 0;
    }
  }

  /**
   * Liste les sauvegardes disponibles sur la Freebox
   */
  listFreeboxBackups() {
    try {
      console.log('\nüìã === SAUVEGARDES CONFIG SUR FREEBOX ===');
      try {
        const configFiles = execSync(`ls -la ${this.freeboxPath}/config/bot-config_*.json 2>/dev/null | tail -20 || echo "Aucun fichier"`, { encoding: 'utf8' });
        console.log(configFiles);
      } catch (error) {
        console.log('Aucun fichier de configuration trouv√©');
      }

      console.log('\nüë• === SAUVEGARDES DONN√âES USERS SUR FREEBOX ===');
      try {
        const userDataFiles = execSync(`ls -la ${this.freeboxPath}/userdata/user-data_*.json 2>/dev/null | tail -20 || echo "Aucun fichier"`, { encoding: 'utf8' });
        console.log(userDataFiles);
      } catch (error) {
        console.log('Aucun fichier de donn√©es utilisateur trouv√©');
      }

      // Afficher les m√©tadonn√©es de synchronisation
      const metadataPath = path.join(this.freeboxPath, 'last_sync.txt');
      if (fs.existsSync(metadataPath)) {
        console.log('\nüìÖ === INFORMATIONS DE SYNCHRONISATION ===');
        console.log(fs.readFileSync(metadataPath, 'utf8'));
      }

      // Statistiques g√©n√©rales
      const configCount = this.countFiles(`${this.freeboxPath}/config/bot-config_*.json`);
      const userDataCount = this.countFiles(`${this.freeboxPath}/userdata/user-data_*.json`);
      const completePairs = Math.min(configCount, userDataCount);
      
      console.log('\nüìä === STATISTIQUES ===');
      console.log(`üìã Fichiers config: ${configCount}`);
      console.log(`üë• Fichiers donn√©es: ${userDataCount}`);
      console.log(`‚úÖ Sauvegardes compl√®tes: ${completePairs}`);
      console.log(`üì¶ R√©tention configur√©e: ${this.retentionHours}h (7 jours)`);

    } catch (error) {
      console.error('‚ùå Erreur listage sauvegardes Freebox:', error.message);
    }
  }

  /**
   * Nettoie les anciennes sauvegardes sur la Freebox (garde 7 jours = 168 fichiers)
   */
  cleanFreeboxBackups() {
    try {
      console.log(`üßπ Nettoyage Freebox (r√©tention: ${this.retentionHours}h)...`);
      
      // Nettoyer les configs
      try {
        const configFiles = execSync(`ls ${this.freeboxPath}/config/bot-config_*.json 2>/dev/null | sort`, { encoding: 'utf8' }).trim().split('\n').filter(f => f);
        console.log(`üìã Configs trouv√©s: ${configFiles.length}`);
        
        if (configFiles.length > this.retentionHours) {
          const toDelete = configFiles.slice(0, configFiles.length - this.retentionHours);
          let deletedCount = 0;
          
          toDelete.forEach(file => {
            try {
              execSync(`rm "${file}"`, { stdio: 'pipe' });
              deletedCount++;
            } catch (error) {
              console.log(`‚ö†Ô∏è Impossible de supprimer: ${path.basename(file)}`);
            }
          });
          
          console.log(`üóëÔ∏è Configs supprim√©s: ${deletedCount}/${toDelete.length}`);
        }
      } catch (error) {
        console.log('üìã Aucun config √† nettoyer');
      }

      // Nettoyer les donn√©es utilisateurs
      try {
        const userDataFiles = execSync(`ls ${this.freeboxPath}/userdata/user-data_*.json 2>/dev/null | sort`, { encoding: 'utf8' }).trim().split('\n').filter(f => f);
        console.log(`üë• Donn√©es trouv√©es: ${userDataFiles.length}`);
        
        if (userDataFiles.length > this.retentionHours) {
          const toDelete = userDataFiles.slice(0, userDataFiles.length - this.retentionHours);
          let deletedCount = 0;
          
          toDelete.forEach(file => {
            try {
              execSync(`rm "${file}"`, { stdio: 'pipe' });
              deletedCount++;
            } catch (error) {
              console.log(`‚ö†Ô∏è Impossible de supprimer: ${path.basename(file)}`);
            }
          });
          
          console.log(`üóëÔ∏è Donn√©es supprim√©es: ${deletedCount}/${toDelete.length}`);
        }
      } catch (error) {
        console.log('üë• Aucune donn√©e √† nettoyer');
      }

      console.log('‚úÖ Nettoyage Freebox termin√©');

    } catch (error) {
      console.error('‚ùå Erreur nettoyage Freebox:', error.message);
    }
  }

  /**
   * V√©rifie l'int√©grit√© des sauvegardes
   */
  checkIntegrity() {
    try {
      console.log('\nüîç === V√âRIFICATION D\'INT√âGRIT√â ===');
      
      const configFiles = execSync(`ls ${this.freeboxPath}/config/bot-config_*.json 2>/dev/null | sort`, { encoding: 'utf8' }).trim().split('\n').filter(f => f);
      const userDataFiles = execSync(`ls ${this.freeboxPath}/userdata/user-data_*.json 2>/dev/null | sort`, { encoding: 'utf8' }).trim().split('\n').filter(f => f);
      
      let integrityIssues = 0;
      let validPairs = 0;
      
      configFiles.forEach(configFile => {
        const fileName = path.basename(configFile);
        const timestamp = fileName.match(/(\d{4}-\d{2}-\d{2}_\d{2}h\d{2})/)?.[1];
        
        if (timestamp) {
          const expectedUserDataFile = `${this.freeboxPath}/userdata/user-data_${timestamp}.json`;
          
          if (fs.existsSync(expectedUserDataFile)) {
            try {
              // V√©rifier que les fichiers sont des JSON valides
              JSON.parse(fs.readFileSync(configFile, 'utf8'));
              JSON.parse(fs.readFileSync(expectedUserDataFile, 'utf8'));
              validPairs++;
            } catch (error) {
              console.log(`‚ùå Fichiers corrompus: ${timestamp}`);
              integrityIssues++;
            }
          } else {
            console.log(`‚ö†Ô∏è Donn√©es manquantes pour: ${timestamp}`);
            integrityIssues++;
          }
        }
      });
      
      console.log(`‚úÖ Sauvegardes valides: ${validPairs}`);
      console.log(`‚ö†Ô∏è Probl√®mes d'int√©grit√©: ${integrityIssues}`);
      
      return integrityIssues === 0;
      
    } catch (error) {
      console.error('‚ùå Erreur v√©rification int√©grit√©:', error.message);
      return false;
    }
  }
}

// Export pour utilisation en tant que module
module.exports = FreeboxSync;

// Si ex√©cut√© directement
if (require.main === module) {
  const sync = new FreeboxSync();
  
  const args = process.argv.slice(2);
  if (args.includes('--list')) {
    sync.listFreeboxBackups();
  } else if (args.includes('--clean')) {
    sync.cleanFreeboxBackups();
  } else if (args.includes('--check')) {
    sync.checkIntegrity();
  } else {
    // Synchronisation normale
    sync.syncToFreebox();
  }
}