const fs = require('fs');

/**
 * Re-correction du probl√®me de ping pour les actions sans cible
 */

function fixPingIssueAgain() {
  const botFilePath = './src/bot.js';
  
  if (!fs.existsSync(botFilePath)) {
    console.error('‚ùå Fichier bot.js introuvable');
    return false;
  }

  let content = fs.readFileSync(botFilePath, 'utf8');
  
  // Trouver et remplacer la logique de s√©lection automatique
  const oldLogic = `      // If not provided, auto-pick a random non-bot member (prefer same channel audience)
      if (!initialPartner) {`;

  const newLogic = `      // Auto-pick random partner ONLY for tromper and orgie actions
      if (!initialPartner && (actionKey === 'tromper' || actionKey === 'orgie')) {`;

  if (content.includes(oldLogic)) {
    content = content.replace(oldLogic, newLogic);
    console.log('‚úÖ Logique de s√©lection automatique corrig√©e');
  } else {
    console.log('‚ö†Ô∏è Logique d√©j√† corrig√©e ou non trouv√©e');
  }

  // Sauvegarder et √©crire
  const backupPath = botFilePath + '.backup-ping-fix-again';
  fs.copyFileSync(botFilePath, backupPath);
  console.log(`üíæ Sauvegarde cr√©√©e: ${backupPath}`);

  fs.writeFileSync(botFilePath, content);
  console.log('‚úÖ Correction ping appliqu√©e √† nouveau');

  return true;
}

// V√©rifier la correction
function verifyPingFix() {
  const botFilePath = './src/bot.js';
  
  if (!fs.existsSync(botFilePath)) {
    return false;
  }

  const content = fs.readFileSync(botFilePath, 'utf8');
  
  const hasCorrectLogic = content.includes("actionKey === 'tromper' || actionKey === 'orgie'");
  const hasOldLogic = content.includes("If not provided, auto-pick a random non-bot member");
  
  console.log('\nüîç === V√âRIFICATION CORRECTION PING ===');
  console.log(`Logique corrig√©e: ${hasCorrectLogic ? '‚úÖ' : '‚ùå'}`);
  console.log(`Ancienne logique: ${hasOldLogic ? '‚ö†Ô∏è Pr√©sente' : '‚úÖ Supprim√©e'}`);
  
  return hasCorrectLogic;
}

// Si ex√©cut√© directement
if (require.main === module) {
  console.log('üîß Re-correction du probl√®me de ping...\n');
  
  const success = fixPingIssueAgain();
  
  if (success) {
    const verified = verifyPingFix();
    
    if (verified) {
      console.log('\nüéâ Correction ping appliqu√©e avec succ√®s !');
      console.log('\nüìã Changement appliqu√©:');
      console.log('  ‚úÖ S√©lection automatique SEULEMENT pour tromper et orgie');
      console.log('  ‚úÖ Autres actions sans cible ‚Üí Aucun ping al√©atoire');
      console.log('\nüìã Prochaines √©tapes:');
      console.log('  1. pm2 restart bagbot');
      console.log('  2. Tester les actions sans cible');
    } else {
      console.log('‚ùå V√©rification √©chou√©e');
      process.exit(1);
    }
  } else {
    console.log('‚ùå √âchec de la correction');
    process.exit(1);
  }
}

module.exports = { fixPingIssueAgain, verifyPingFix };